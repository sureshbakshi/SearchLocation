import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import {getPredictionSuggestion} from './searchApi'
const initialState = {
  status: 'idle',
  options: [],
  history: []
};
// async actions
export const getPredictions = createAsyncThunk(
  'search/fetchPlaces',
  async (info) => {
    const response = await getPredictionSuggestion(info);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);
export const searchSlice = createSlice({
  name: 'search',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addToHistory: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      let history = state.history
        let isPlaceAvail =  -1
        if(action.payload){
          isPlaceAvail = history.findIndex((place) => {return place.place_id === action.payload.place_id})
        }
        if(isPlaceAvail < 0 && action.payload) {
         state.history.push(action.payload);
        } 
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getPredictions.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getPredictions.fulfilled, (state, action) => {
        state.status = 'idle';
        state.options = action.payload;
      });
  },
});

export const { addToHistory} = searchSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. 
export const getOptions = (state) => {
    return state.search.options || [];
}
export const getHistory = (state) => state.search.history


export default searchSlice.reducer;
